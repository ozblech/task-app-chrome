{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"/home/oz/Desktop/git/task-app-front/src/components/VoiceRecognition/VoiceRecognition.js\";\nimport React, { Component } from 'react';\nimport mic from '../AddTaskForm/mic.png';\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\nrecognition.continous = true;\nrecognition.interimResults = true;\nrecognition.lang = 'en-US';\n\nclass VoiceRecognition extends Component {\n  constructor() {\n    super();\n\n    this.handleListen = () => {\n      if (this.state.listening) recognition.start();\n      let finalTranscript = '';\n\n      recognition.onresult = event => {\n        let interimTranscript = '';\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript;\n          if (event.results[i].isFinal) finalTranscript += transcript + ' ';else interimTranscript += transcript;\n        }\n\n        document.getElementById('interim').innerHTML = interimTranscript;\n        document.getElementById('final').innerHTML = finalTranscript;\n        document.getElementById('description').value = finalTranscript;\n      };\n    };\n\n    this.state = {\n      listening: false\n    };\n    this.toggleListen = this.toggleListen.bind(this);\n    this.handleListen = this.handleListen.bind(this);\n  }\n\n  toggleListen() {\n    this.setState({\n      listening: !this.state.listening\n    }, this.handleListen);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      id: \"microphone-btn\",\n      className: \"pointer grow\",\n      src: mic,\n      width: \"50px\",\n      onClick: this.toggleListen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nexport default VoiceRecognition;\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    textAlign: 'center'\n  },\n  button: {\n    width: '60px',\n    height: '60px',\n    background: 'lightblue',\n    borderRadius: '50%',\n    margin: '6em 0 2em 0'\n  },\n  interim: {\n    color: 'gray',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  },\n  final: {\n    color: 'black',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  }\n};\nconst {\n  container,\n  button,\n  interim,\n  final\n} = styles;","map":{"version":3,"sources":["/home/oz/Desktop/git/task-app-front/src/components/VoiceRecognition/VoiceRecognition.js"],"names":["React","Component","mic","SpeechRecognition","window","webkitSpeechRecognition","recognition","continous","interimResults","lang","VoiceRecognition","constructor","handleListen","state","listening","start","finalTranscript","onresult","event","interimTranscript","i","resultIndex","results","length","transcript","isFinal","document","getElementById","innerHTML","value","toggleListen","bind","setState","render","container","styles","display","flexDirection","alignItems","textAlign","button","width","height","background","borderRadius","margin","interim","color","border","padding","final"],"mappings":"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","sourcesContent":["'use strict'\nimport React, { Component } from 'react'\nimport mic from '../AddTaskForm/mic.png'\n\n\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\nconst recognition = new SpeechRecognition()\n\nrecognition.continous = true\nrecognition.interimResults = true\nrecognition.lang = 'en-US'\n\n\nclass VoiceRecognition extends Component {\n\tconstructor() {\n    super()\n    \tthis.state = {\n     \t listening: false\n    }\n\t    this.toggleListen = this.toggleListen.bind(this)\n\t    this.handleListen = this.handleListen.bind(this)\n  \t}\n  \n  toggleListen() {\n    this.setState({\n      listening: !this.state.listening\n    }, this.handleListen)\n  }\n\n\thandleListen = () => {\n\t\tif (this.state.listening) recognition.start()\n\n\t    let finalTranscript = ''\n\t    recognition.onresult = event => {\n\t\t    let interimTranscript = ''\n\n\t\t    for (let i = event.resultIndex; i < event.results.length; i++) {\n\t\t    \tconst transcript = event.results[i][0].transcript;\n\t\t        if (event.results[i].isFinal) finalTranscript += transcript + ' ';\n\t\t        else interimTranscript += transcript;\n\t\t    }\n\t\t    document.getElementById('interim').innerHTML = interimTranscript\n\t\t    document.getElementById('final').innerHTML = finalTranscript\n\t\t    document.getElementById('description').value = finalTranscript\n\t\t}\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div style={container}>\n\t\t\t\t<img id = 'microphone-btn' \n\t\t\t\tclassName='pointer grow'\n\t\t\t\tsrc={mic} \n\t\t\t\twidth = \"50px\"\n\t\t\t\tonClick={this.toggleListen} \n\t\t\t\t/>\n     \t\t</div>\n\t\t)\n\t}\n}\n\n\nexport default VoiceRecognition;\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    textAlign: 'center'\n  },\n  button: {\n    width: '60px',\n    height: '60px',\n    background: 'lightblue',\n    borderRadius: '50%',\n    margin: '6em 0 2em 0'\n  },\n  interim: {\n    color: 'gray',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  },\n  final: {\n    color: 'black',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  }\n}\n\nconst { container, button, interim, final } = styles"]},"metadata":{},"sourceType":"module"}